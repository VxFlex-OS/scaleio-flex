#!/bin/sh
#
# ScaleIO FlexVolume driver
#
# Do not modify this script, configuration settings can be found at
# /opt/emc/scaleio/flexvolume/cfg/config

#########################################################
# err
# Arguments:
#   $1: Name of calling function + error msg for stderr
# Returns
#   Nothing
#########################################################
err() {
	debug $*
	shift
	printf "%b" "$*" 1>&2
}

#########################################################
# log
# Arguments:
#   $1: Name of calling function + msg for stdout
# Returns
#   Nothing
#########################################################
log() {
	debug $*
	shift
	printf "%b" "$*" >&1
}

#########################################################
# debug
# Arguments:
#   $1: Name of calling function + msg for debug log
# Returns
#   Nothing
#########################################################
debug() {
	if [ "$SCALEIO_DEBUG" = "1" ]; then
		logtofile $*
	fi
}

#########################################################
# logtofile
# Arguments:
#   $1: Name of calling function + msg for debug log
# Returns
#   Nothing
#########################################################
logtofile() {
	function=$1
	shift
	printf "%s pid=%s func=%s msg=\"%s\"\n" "$(date +"%Y-%m-%d %H:%M:%S")" "$$" "${function}" "$*" >> ${LOGFILE}
}

#########################################################
# success
# Arguments:
#   $1: Name of calling function
# Returns
#   Nothing
#########################################################
success() {
	log $1 '{"status": "Success"}'
	exit 0
}

#########################################################
# usage
# Arguments:
#   Nothing
# Returns
#   Nothing
#########################################################
usage() {
	err ${FUNCNAME} "error: invalid usage\n"
	err ${FUNCNAME} "\t$0 init\n"
	err ${FUNCNAME} "\t$0 attach <json params> <nodename>\n"
	err ${FUNCNAME} "\t$0 detach <mount device> <nodename>\n"
	err ${FUNCNAME} "\t$0 waitforattach <mount device> <json params>\n"
	err ${FUNCNAME} "\t$0 mountdevice <mount dir> <mount device> <json params>\n"
	err ${FUNCNAME} "\t$0 unmountdevice <mount dir>\n"
	err ${FUNCNAME} "\t$0 isattached <json params> <nodename>\n"

	exit 1
}

#########################################################
# getlabelfromvolume
# Arguments:
#   $1: Volume ID
#   $2: Label being requested
# Returns:
#   value of the label or "<no value>" if not found
#########################################################
getlabelfromvolume() {
	if [ "$USELABELS" != "1" ]; then
		return
	fi
	VOLID="${1}"
	LABEL="${2}"
	VALUE=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pv ${VOLID} --template="{{.metadata.labels.${LABEL}}}")
	debug $FUNCNAME "Retrieved label from volume ${VOLID} ${LABEL}=${VALUE}"
	echo "${VALUE}"
}

#########################################################
# setlabelonvolume
# Arguments:
#   $1: Volume ID
#   $2: Label being set
#   $3: Value to set
# Returns:
#   Nothing
#########################################################
setlabelonvolume() {
	if [ "$USELABELS" != "1" ]; then
		return
	fi
	VOLID="${1}"
	LABEL="${2}"
	NEWVALUE="${3}"
	VALUE=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} label pv ${VOLID} --overwrite ${LABEL}=${NEWVALUE})
	debug $FUNCNAME "Set label on volume ${VOLID} ${LABEL}=${NEWVALUE}"
}

#########################################################
# clearlabelonvolume
# Arguments:
#   $1: Volume ID
#   $2: Label to clear
# Returns
#   Nothing
#########################################################
clearlabelonvolume() {
	if [ "$USELABELS" != "1" ]; then
		return
	fi
	VOLID="${1}"
	LABEL="${2}"
	VALUE=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} label pv ${VOLID} --overwrite ${LABEL}-)
	debug $FUNCNAME "Cleared label on volume ${VOLID} ${LABEL}"
}

#########################################################
# clearlabelonvolume
# Arguments:
#   $1: Volume ID
#   $2: Label to clear
# Returns
#   Nothing
#########################################################
ismounted() {
	local mntpath=$1
	local mount=$(findmnt -n "${mntpath}" 2>/dev/null | cut -d' ' -f1)
	if [ "${mount}" = "${mntpath}" ]; then echo 1; else echo 0; fi
}

#########################################################
# clearlabelonvolume
# Arguments:
#   $1: Volume ID
#   $2: Label to clear
# Returns
#   Nothing
#########################################################
volidfromjson() {
	local json_params=$1
	local volumeid=$(echo "${json_params}" | grep -Po '"volumeID":".*"?[^\\]"' | cut -d: -f 2 | cut -d\" -f 2)
	if [ -z "${volumeid}" ] || [ "${volumeid}" = null ]; then
		err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"Unable to extract volumeID\"}"
		exit 1
	fi
	echo ${volumeid}
}

#########################################################
# getrunningpods
# Arguments:
#   Nothing
# Returns
#   List of pods with Status of Running
#########################################################
getrunningpods() {
	local running_pods=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pods | grep Running | awk '{print $1}')
	debug ${FUNCNAME} "Running pods:" "${running_pods}"
	echo "${running_pods}"

}

#########################################################
# getflexvolsforpod
# Arguments:
#   $1: Pod name
# Returns
#   List of FlexVolumes bound to specified pod
#########################################################
getflexvolsforpod() {
	local pod=$1
	local flex_volume_ids=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pod ${pod} --template='{{range .spec.volumes}}{{.flexVolume.options.volumeID}} {{end}}' | sed -e 's/<no value>//g')
	debug ${FUNCNAME} "FlexVolumes attached to pod ${pod}:" "${flex_volume_ids}"
	echo "${flex_volume_ids}"
}

#########################################################
# getpvcsforpod
# Arguments:
#   $1: Pod name
# Returns
#   List of PVCs bound to specified pod
#########################################################
getpvcsforpod() {
	local pod=$1
	local pvcs=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pod ${pod} --template='{{range .spec.volumes}}{{.persistentVolumeClaim.claimName}} {{end}}' | sed -e 's/<no value>//g')
	debug ${FUNCNAME} "PVCs attached to pod ${pod}:" "${pvcs}"
	echo "${pvcs}"
}

#########################################################
# getvolsforpvc
# Arguments:
#   $1: PVC name
# Returns
#   List of volumes bound to specified PVC
#########################################################
getvolsforpvc() {
	local pvc=$1
	local pvc_vol_names=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pvc ${pvc} --template='{{.spec.volumeName}}' | sed -e 's/<no value>//g')
	debug ${FUNCNAME} "Volumes attached to PVC ${pvc}:" "${pvc_vol_names}"
	echo "${pvc_vol_names}"
}


#########################################################
# getpvcforvol
# Arguments:
#   $1: Volume ID
# Returns
#   PVC bound to specified volume (if applicable)
#########################################################
getpvcforvol() {
	local volumeid=$1
	local pvc
	local status=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pv ${volumeid} --template='{{.status.phase}}' | sed -e 's/<no value>//g')
	if [ ${status} = "Bound" ]; then
		pvc=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pv ${volumeid} --template='{{.spec.claimRef.name}}' | sed -e 's/<no value>//g')
		debug ${FUNCNAME} "PVC attached to PV ${volumeid}:" "${pvc}"
	fi
	echo "${pvc}"
}

#########################################################
# getaccessmodesforpvc
# Arguments:
#   $1: PVC name
# Returns
#   Access modes set for specified PVC (if applicable)
#########################################################
getaccessmodesforpvc() {
	local pvc=$1
	local modes=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pvc ${pvc} --template='{{.status.accessModes}}' | sed -e 's/<no value>//g')
	debug ${FUNCNAME} "Access modes for PVC ${pvc}:" "${modes}"
	echo "${modes}"
}

#########################################################
# getaccessmodesforvol
# Arguments:
#   $1: Volume ID
# Returns
#   Access modes set for specified volume
#########################################################
getaccessmodesforvol() {
	local volumeid=$1
	local modes=$(${CLI_CMD} ${CONFIG_OPTION}=${KUBECONFIG} --token=${TOKEN} get pv ${volumeid} --template='{{.spec.accessModes}}' | sed -e 's/<no value>//g')
	debug ${FUNCNAME} "Access modes for PV ${volumeid}:" "${modes}"
	echo "${modes}"
}

#########################################################
# isvolumeinuse
# Arguments:
#   $1: Volume ID
# Returns
#   "1" if specified vol is being used by another pod
#   "0" otherwise
#########################################################
isvolumeinuse() {
	local volumeid=$1
	local running_pods=$(getrunningpods)
	local i
	for i in ${running_pods}
	do
		local flex_volume_ids=$(getflexvolsforpod ${i})
		local j
		for j in ${flex_volume_ids}
		do
			if [ "${j}" = "${volumeid}" ]; then
				debug ${FUNCNAME} "Volume ${volumeid} is in use by another pod ${i}"
				echo 1
				return
			fi
		done

		local pvcs=$(getpvcsforpod ${i})
		local k
		for k in ${pvcs}
		do
			if [ "${k}" != "<no value>" ]; then
				local pvc_vol_names=$(getvolsforpvc ${k})
				local m
				for m in ${pvc_vol_names}
				do
					if [ "${m}" = "${volumeid}" ]; then
						debug ${FUNCNAME} "Volume ${volumeid} claimed by PVC ${k} is in use by another pod ${i}"
						echo 1
						return
					fi
				done
			fi
		done
	done

	echo 0
	return
}

getvolumename() {
	local json_params=$1
	local volumeid=$(echo "${json_params}" | grep -Po '"volumeID":".*"?[^\\]"' | cut -d: -f 2 | cut -d\" -f 2)
	if [ -z "${volumeid}" ] || [ "${volumeid}" = null ]; then
		err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"Unable to extract volumeID\"}"
		exit 1
	fi
	log ${FUNCNAME} "{\"status\": \"Success\", \"volumeName\": \"${volumeid}\"}"
	exit 0
}

attach() {
	local json_params=$1
	local node_name=$2
	local volumeid=$(volidfromjson ${json_params})

	if [ -z "${volumeid}" ]; then
		err ${FUNCNAME} '{"status": "Failure", "message": "Unable to extract volumeID"}'
		exit 1
	fi

	# if we are not using labels, return success as we assume all volumes
	# are attached to all nodes
	if [ "${USELABELS}" != "1" ]; then
		log $FUNCNAME "{\"status\": \"Success\", \"device\":\"${volumeid}\"}"
		exit 0
	fi

	local volume_attached=$(getlabelfromvolume ${volumeid} "attached")
	local volume_attached_node=$(getlabelfromvolume ${volumeid} "attachedNode")
	if [ -z "${volume_attached}" ]; then
		volume_attached="false"
	fi
	if [ "${volume_attached}" = "true" ]; then
		local pvc=$(getpvcforvol ${volumeid})
		local mode
		if [ "${pvc}" != "" ]; then
			mode=$(getaccessmodesforpvc ${pvc})
		else
			mode=$(getaccessmodesforvol ${volumeid})
		fi

		# if accessMode is ReadWriteOnce and volume is already attached to a different node, fail this attach
		if [ "${mode}" = "[ReadWriteOnce]" ] && [ "${volume_attached_node}" != "${node_name}" ]; then
			err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"Volume is in use by another node\"}"
			exit 1
		fi

		log ${FUNCNAME} "{\"status\": \"Success\", \"device\":\"${volumeid}\"}"
		exit 0
	fi

	setlabelonvolume ${volumeid} "attached" "true"
	setlabelonvolume ${volumeid} "attachedNode" "${node_name}"

	log ${FUNCNAME} "{\"status\": \"Success\", \"device\":\"${volumeid}\"}"
	exit 0
}

detach() {
	local volumeid=$1

	clearlabelonvolume ${volumeid} "attached"
	clearlabelonvolume ${volumeid} "attachedNode"

	success ${FUNCNAME}
}

mountdevice() {
	local mntpath=$1
	local dev=$2
	local json_params=$3
	local fstype=$(echo "${json_params}" | grep -Po '"kubernetes.io/fsType":".*"?[^\\]"' | cut -d: -f 2 | cut -d\" -f 2)

	if [ ! -b "${dev}" ]; then
		err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"${dev} does not exist\"}"
		exit 1
	fi

	if [ "$(ismounted ${mntpath})" = "1" ] ; then
		success ${FUNCNAME}
	fi

	local volfstype=$(blkid -o udev "${dev}" 2>/dev/null | grep "ID_FS_TYPE"| cut -d"=" -f2)
	if [ "${volfstype}" = "" ]; then
		local cmd="mkfs -t ${fstype}"
		if [ "${fstype}" = "ext4" ]; then
			cmd="${cmd} -F"
		elif [ "$FSTYPE" = "xfs" ]; then
			cmd="${cmd} -f"
		fi
		if ! ${cmd} "${dev}" > /dev/null 2>&1; then
			err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"Failed to create fs ${fstype} on device ${dev}\"}"
			exit 1
		fi
	fi

	mkdir -p "${mntpath}" > /dev/null 2>&1
	local selinux_status=$(sestatus |grep 'SELinux status' | grep disabled)
	local selinux_enabled=$(echo $?)
	if ! mount --make-shared "${dev}" "${mntpath}" > /dev/null 2>&1; then
		debug ${FUNCNAME} "Failed to mount device ${dev} at ${mntpath}"
		err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"Failed to mount device ${dev} at ${mntpath}\"}"
		exit 1
	fi
	if [ "${selinux_enabled}" = "1" ]; then
		if ! chcon -t svirt_sandbox_file_t "${mntpath}" > /dev/null 2>&1; then
			debug ${FUNCNAME} "Failed to modify SELINUX properties for ${mntpath}"
			err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"Failed to modify SELINUX properties for ${mntpath}\"}"
			exit 1
		fi
	fi
	success ${FUNCNAME}
}

unmountdevice() {
	local mntpath=$1
	if [ "$(ismounted ${mntpath})" = "0" ] ; then success ${FUNCNAME}; fi
	if ! umount "${mntpath}" > /dev/null 2>&1; then
		err ${FUNCNAME} "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${mntpath}\"}"
		exit 1
	fi
	sleep 2
	success ${FUNCNAME}
}

isattached() {
	local json_params=$1
	local node_name=$2
	local volumeid=$(volidfromjson ${json_params})

	# if we are not using labels, return success as we assume all volumes
	# are attached to all nodes
  if [ "${USELABELS}" != "1" ]; then
		log $FUNCNAME "{\"status\": \"Success\", \"attached\":true}"
		exit 0
	fi

	local volume_attached=$(getlabelfromvolume ${volumeid} "attached")
	local volume_attached_node=$(getlabelfromvolume ${volumeid} "attachedNode")
	if [ "${volume_attached}" = "true" ]; then
		if [ "${volume_attached_node}" = "${node_name}" ]; then
			log ${FUNCNAME} "{\"status\": \"Success\", \"attached\":true}"
			exit 0
		fi
	fi
	log ${FUNCNAME} "{\"status\": \"Success\", \"attached\":false}"
	exit 0
}

waitforattach() {
	local expected_dev=$1
	local json_params=$2
	local volumeid=$(volidfromjson ${json_params})

	local dev="/dev/disk/by-id/$(ls -1 /dev/disk/by-id | grep "\-${volumeid}$")"

	if [ -z "${dev}" ]; then
		debug ${FUNCNAME} "${volumeid}" "not found or mapped"
		err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"Volume not attached\"}"
		exit 1
	fi

	if [ "${ENABLE_ONE_POD_RESTRICTION}" = "1" ]; then
		local vol_attached_to_another_pod=$(isvolumeinuse ${volumeid})
		debug ${FUNCNAME} "vol_attached_to_another_pod:" "${vol_attached_to_another_pod}"
		if [ "${vol_attached_to_another_pod}" = "1" ]; then
			err ${FUNCNAME} "{\"status\": \"Failure\", \"message\": \"Volume ${volumeid} is in use by another pod\"}"
			exit 1
		fi
	fi

	log ${FUNCNAME} "{\"status\": \"Success\", \"device\":\"${dev}\"}"
	exit 0
}

# MAIN

CONFIGFILE="/opt/emc/scaleio/flexvolume/cfg/config"
if [ -f "${CONFIGFILE}" ]; then
	# source the config file
	source "${CONFIGFILE}"
fi

# in case some values were not specific in the config file, set their values
SCALEIO_DEBUG="${SCALEIO_DEBUG:-1}"
KUBECONFIG="${KUBECONFIG:-/root/.kube/config}"
TOKEN_SCRIPT="${TOKEN_SCRIPT:-/opt/emc/scaleio/flexvolume/bin/get-token.sh}"
LOGFILE="${LOGFILE:-/var/log/scaleio-flexvol.log}"
ENABLE_ONE_POD_RESTRICTION="${ENABLE_ONE_POD_RESTRICTION:-0}"
USELABELS="${USELABELS:-1}"

op=$1

if [ "$op" = "init" ]; then
	log "main" "{\"status\":\"Success\",\"capabilities\":{\"attach\":true}}"
	exit 0
fi
if [ "$#" -lt "2" ]; then usage; fi

shift

debug "main" "$op" "$*"

TOKEN="$(${TOKEN_SCRIPT})"

WHICH_OC=$(which oc > /dev/null 2>&1)
WHICH_OC_RETURN=$(echo $?)
if [ "${WHICH_OC_RETURN}" = "0" ]; then
	CLI_CMD="oc"
	CONFIG_OPTION="--config"
else
	CLI_CMD="kubectl"
	CONFIG_OPTION="--kubeconfig"
fi

case "$op" in
	attach)
		attach "$@"
		;;
	detach)
		detach "$@"
		;;
	waitforattach)
		waitforattach "$@"
		;;
	mountdevice)
		mountdevice "$@"
		;;
	unmountdevice)
		unmountdevice "$@"
		;;
	isattached)
		isattached "$@"
		;;
	getvolumename)
		getvolumename "$@"
		;;
	*)
		err "main" "{\"status\": \"Not supported\"}"
		exit 1
esac

exit 1
